/* =================================================================================
File name:    

Description: 

=====================================================================================
------------------------------------------------------------------------------*/

typedef struct 	{ float  Ra; 				/* Вход: сопротивление якоря (ohm) */
				  float  La;				/* Вход: индуктивность якоря (ohm) */
			      float  Re;				/* Вход: сопротивление обмотки возбуждения  (H) */	  			      
				  float  Le;				/* Вход: индуктивность обмотки возбуждения (H) */			
				  float  Ra_base; 		    /* Вход: базовое сопротивление якоря (ohm) */
				  float  La_base;		    /* Вход: базовая индуктивность якоря (ohm) */
			      float  Re_base;			/* Вход: базовое сопротивление обмотки возбуждения  (H) */	  			      
				  float  Le_base;			/* Вход: базовая индуктивность обмотки возбуждения (H) */			
				  float  T_base; 			/* Вход: базовое значение времени */
				  float  J;				/* Вход: момент инерции () */
				  float  Ue_base; 				/* Вход: базовое значение напряжения возбуждения */		
				  float  Ie_base;				/* Вход: базовый ток обмотки возбуждения */					  
				  float  Ua_base; 				/* Вход: базовое значение напряжения якоря */		
				  float  Ia_base; 				/* Вход: базовое значение тока якоя (amp) */
				  float  Wb;                /* Вход: базовая скорость */
				  float  Mb;    			/* Вход: базовый момент */
				  float  k_fi_nom;			/* Вход: номинальный поток возбуждения */
				  float  Ta_pu;				/* Выход:расчетное значение постоянной времени якоря                          */
				  float  Te_pu;                /* Выход:расчетное значение постоянной времени обмотки возбуждения            */
				  float  Tm_pu;                /* Выход:расчетное значение механической постоянной времени                   */
				  float  K1;				/* Выход: константа используемая в расчете модели   */
			      float  K2;				/* Выход: константа используемая в расчете модели   */
			      float  K3;				/* Выход: константа используемая в расчете модели   */
			      float  K4;				/* Выход: константа используемая в расчете модели   */
			      float  K5;				/* Выход: константа используемая в расчете модели   */			      
			      float  Ts;				/* Вход: время дискретизации модели   */			      
				  void   (*calc)();	    	/* Указатель на функцию подсчета */ 
				} BDCM_CONST;
																																																																																																																																																																																																								
typedef BDCM_CONST *BDCM_CONST_handle;
/*-----------------------------------------------------------------------------
Инициация по умолчанию для объекта BDCM_CONST-----------------------------------------------------------------------------*/                     
#define BDCM_CONST_DEFAULTS { 0,0,0,0,0,0,0,0,0,0, \
                             0,0,0,0, \
                             0,0, \
                             0,0,0,0, \
                             0,0,0,0,0,0,\
                            (void (*)(long))bdcm_const_calc }

/*------------------------------------------------------------------------------
Прототип функции в файле BDCM_CONST.C
------------------------------------------------------------------------------*/
void bdcm_const_calc(BDCM_CONST_handle);
